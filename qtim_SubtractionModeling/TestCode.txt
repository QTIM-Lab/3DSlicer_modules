# for widgetName in slicer.util.findChildren():
# 	# widget = slicer.util.findChildren(self.__editorWidget.editBoxFrame)
# 	try:
# 		if 'action' in widgetName.objectName:
# 			print widgetName.objectName
# 			print widgetName.parent.name
# 	except:
# 		pass
# 	# print widgetName.parent.name
# 	# widgetName.hide()

for i in x[0].parent().children():
	try:
		print i.text
	except:
		pass

for i in xrange(len(x)):
	print x[i].text


			""" Below is some junk code that I was thinking about to combined separate modles into one threshold ROI.
				Probably doesn't work. Better choice is to find a vtk function. 
			"""

			# volumesLogic = slicer.modules.volumes.logic()
			# combinedOutputVolume = volumesLogic.CloneVolume(slicer.mrmlScene, baselineVolume, baselineVolume.GetName() + '_roi')
			# volumesLogic.ClearVolumeImageData(combinedOutputVolume)
			# combinedOutputImageData = combinedOutputVolume.GetImageData()
			# shape = list(combinedOutputVolume.GetImageData().GetDimensions())
			# shape.reverse()
			# combinedOutputArray = vtk.util.numpy_support.vtk_to_numpy(combinedOutputImageData.GetPointData().GetScalars()).reshape(shape)

			# for output_idx, output in enumerate(self.__outputList):

			# 	outputNode = Helper.getNodeByID(output)
			# 	# outputImageData = outputNode.GetImageData()
			# 	# shape = list(outputNode.GetImageData().GetDimensions())
			# 	# shape.reverse()
			# 	# outputArray = vtk.util.numpy_support.vtk_to_numpy(outputImageData.GetPointData().GetScalars()).reshape(shape)

			# 	parameters = {}
			# 	parameters["inputVolume1"] = outputNode
			# 	parameters["inputVolume2"] = combinedOutputVolume
			# 	parameters['outputVolume'] = combinedOutputVolume
			# 	parameters['order'] = '1'

			# 	self.__cliNode = None
			# 	self.__cliNode = slicer.cli.run(slicer.modules.addscalarvolumes, self.__cliNode, parameters)

			""" The following are kept from ChangeTracker, might be useful later.
			"""

			# def cleanup(self):
			# 	self.removeGUIObservers()
			# 	self.setAndObserveParameterNode(None)
			# 	self.setAndObserveClippingMarkupNode(None)
			# 	pass

			# def setAndObserveParameterNode(self, parameterNode):
			# 	if parameterNode == self.__parameterNode and self.__parameterNodeObserver:
			# 		# no change and node is already observed
			# 		return
			# 	# Remove observer to old parameter node
			# 	if self.__parameterNode and self.__parameterNodeObserver:
			# 		self.__parameterNode.RemoveObserver(self.__parameterNodeObserver)
			# 		self.__parameterNodeObserver = None
			# 	# Set and observe new parameter node
			# 	self.__parameterNode = parameterNode
			# 	if self.__parameterNode:
			# 		self.__parameterNodeObserver = self.__parameterNode.AddObserver(vtk.vtkCommand.ModifiedEvent, self.onParameterNodeModified)
			# 	# Update GUI
			# 	self.updateGUIFromParameterNode()

			# def onParameterNodeModified(self, observer, eventid):
			# 	self.updateGUIFromParameterNode()

			# def getParameterNode(self):
				# return self.__parameterNode